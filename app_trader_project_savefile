/*
Based on research completed prior to launching App Trader as a company, you can assume the following:  

a. App Trader will purchase apps for 10,000 times the price of the app. For apps that are priced from free up to $1.00, the purchase price is $10,000.  

b. Apps earn $5000 per month on average from in-app advertising and in-app purchases _regardless_ of the price of the app.  

c. App Trader will spend an average of $1000 per month to market an app _regardless_ of the price of the app. If App Trader owns rights to the app in both 
stores, it can market the app for both stores for a single cost of $1000 per month.  

d. For every half point that an app gains in rating, its projected lifespan increases by one year, in other words, an app with a rating of 0 can be expected to 
be in use for 1 year, an app with a rating of 1.0 can be expected to last 3 years, and an app with a rating of 4.0 can be expected to last 9 years. Ratings 
should be rounded to the nearest 0.5 to evaluate an app's likely longevity.  

e. App Trader would prefer to work with apps that are available in both the App Store and the Play Store since they can market both for the same $1000 per 
month.

DIRECTIVES:

a. Develop some general recommendations as to the price range, genre, content rating, or anything else for apps that the company should target.  

b. Develop a Top 10 List of the apps that App Trader should buy next week for its **Pi Day** debut.  

c. Prepare a 5-10 minute presentation for the leadership team of App Trader to inform them of your recommendations.
*/

--names of apps in both stores
SELECT *
FROM app_store_apps AS asa JOIN play_store_apps AS psa ON asa.name = psa.name
WHERE asa.name IS NOT NULL
AND psa.name IS NOT NULL
ORDER BY asa.name;

--apps ordered by rating and review count (app_store)
SELECT *
FROM app_store_apps
WHERE rating IS NOT NULL
ORDER BY rating DESC, review_count DESC;

--apps ordered by rating and review count (play_store)
SELECT *
FROM play_store_apps
WHERE rating IS NOT NULL
ORDER BY rating DESC, review_count DESC;

--average rating and review count for apps that cost $1 vs. $0 (app_store)
SELECT price, AVG(rating::numeric) as avg_rating, AVG(review_count::numeric) as avg_review_count
FROM app_store_apps
WHERE price IN(0.00, 0.99)
GROUP by price;

--average rating and review count for apps that cost $1 vs. $0 (play_store) NOT FINISHED
SELECT AVG(rating::numeric) as avg_rating, AVG(review_count::numeric) as avg_review_count, price
FROM play_store_apps
WHERE price = '$0.99'
GROUP by price;

--weighted average of star rating
WITH both_tables AS
	(SELECT asa.name AS movie_name, asa.review_count AS asa_rc, asa.rating AS asa_r, psa.review_count AS psa_rc, psa.rating AS psa_r, asa.price AS asa_price,
	psa.price AS psa_price
	FROM app_store_apps AS asa JOIN play_store_apps AS psa ON asa.name = psa.name
	WHERE asa.name IS NOT NULL
	AND psa.name IS NOT NULL)
SELECT movie_name, ((((asa_rc::numeric) * asa_r) + (psa_rc * psa_r)) / ((asa_rc::numeric) + psa_rc)) AS weighted_average,
ABS(asa_r - psa_r) AS rating_difference, asa_price, psa_price
FROM both_tables
ORDER BY rating_difference